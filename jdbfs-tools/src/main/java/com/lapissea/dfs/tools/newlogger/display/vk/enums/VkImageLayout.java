package com.lapissea.dfs.tools.newlogger.display.vk.enums;

import com.lapissea.dfs.utils.iterableplus.Iters;

import java.util.Map;

import static org.lwjgl.vulkan.EXTAttachmentFeedbackLoopLayout.VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT;
import static org.lwjgl.vulkan.EXTFragmentDensityMap.VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT;
import static org.lwjgl.vulkan.KHRDynamicRenderingLocalRead.VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ_KHR;
import static org.lwjgl.vulkan.KHRFragmentShadingRate.VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR;
import static org.lwjgl.vulkan.KHRMaintenance2.VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR;
import static org.lwjgl.vulkan.KHRMaintenance2.VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR;
import static org.lwjgl.vulkan.KHRSeparateDepthStencilLayouts.VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR;
import static org.lwjgl.vulkan.KHRSeparateDepthStencilLayouts.VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR;
import static org.lwjgl.vulkan.KHRSeparateDepthStencilLayouts.VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR;
import static org.lwjgl.vulkan.KHRSeparateDepthStencilLayouts.VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR;
import static org.lwjgl.vulkan.KHRSharedPresentableImage.VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR;
import static org.lwjgl.vulkan.KHRSwapchain.VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;
import static org.lwjgl.vulkan.KHRSynchronization2.VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR;
import static org.lwjgl.vulkan.KHRSynchronization2.VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR;
import static org.lwjgl.vulkan.KHRVideoDecodeQueue.VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR;
import static org.lwjgl.vulkan.KHRVideoDecodeQueue.VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR;
import static org.lwjgl.vulkan.KHRVideoDecodeQueue.VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR;
import static org.lwjgl.vulkan.KHRVideoEncodeQuantizationMap.VK_IMAGE_LAYOUT_VIDEO_ENCODE_QUANTIZATION_MAP_KHR;
import static org.lwjgl.vulkan.KHRVideoEncodeQueue.VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR;
import static org.lwjgl.vulkan.KHRVideoEncodeQueue.VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR;
import static org.lwjgl.vulkan.KHRVideoEncodeQueue.VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR;
import static org.lwjgl.vulkan.NVShadingRateImage.VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV;
import static org.lwjgl.vulkan.VK10.*;
import static org.lwjgl.vulkan.VK11.VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL;
import static org.lwjgl.vulkan.VK11.VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL;
import static org.lwjgl.vulkan.VK12.VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL;
import static org.lwjgl.vulkan.VK12.VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL;
import static org.lwjgl.vulkan.VK12.VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL;
import static org.lwjgl.vulkan.VK12.VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL;
import static org.lwjgl.vulkan.VK13.VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL;
import static org.lwjgl.vulkan.VK13.VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL;
import static org.lwjgl.vulkan.VK14.VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ;

public enum VkImageLayout{
	UNDEFINED(VK_IMAGE_LAYOUT_UNDEFINED),
	GENERAL(VK_IMAGE_LAYOUT_GENERAL),
	COLOR_ATTACHMENT_OPTIMAL(VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL),
	DEPTH_STENCIL_ATTACHMENT_OPTIMAL(VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL),
	DEPTH_STENCIL_READ_ONLY_OPTIMAL(VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL),
	SHADER_READ_ONLY_OPTIMAL(VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL),
	TRANSFER_SRC_OPTIMAL(VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL),
	TRANSFER_DST_OPTIMAL(VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL),
	PREINITIALIZED(VK_IMAGE_LAYOUT_PREINITIALIZED),
	DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL(VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL),
	DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL(VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL),
	DEPTH_ATTACHMENT_OPTIMAL(VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL),
	DEPTH_READ_ONLY_OPTIMAL(VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL),
	STENCIL_ATTACHMENT_OPTIMAL(VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL),
	STENCIL_READ_ONLY_OPTIMAL(VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL),
	READ_ONLY_OPTIMAL(VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL),
	ATTACHMENT_OPTIMAL(VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL),
	RENDERING_LOCAL_READ(VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ),
	PRESENT_SRC_KHR(VK_IMAGE_LAYOUT_PRESENT_SRC_KHR),
	VIDEO_DECODE_DST_KHR(VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR),
	VIDEO_DECODE_SRC_KHR(VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR),
	VIDEO_DECODE_DPB_KHR(VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR),
	SHARED_PRESENT_KHR(VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR),
	FRAGMENT_DENSITY_MAP_OPTIMAL_EXT(VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT),
	FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR(VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR),
	VIDEO_ENCODE_DST_KHR(VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR),
	VIDEO_ENCODE_SRC_KHR(VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR),
	VIDEO_ENCODE_DPB_KHR(VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR),
	ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT(VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT),
	VIDEO_ENCODE_QUANTIZATION_MAP_KHR(VK_IMAGE_LAYOUT_VIDEO_ENCODE_QUANTIZATION_MAP_KHR),
	DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR(VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR),
	DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR(VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR),
	SHADING_RATE_OPTIMAL_NV(VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV),
	RENDERING_LOCAL_READ_KHR(VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ_KHR),
	DEPTH_ATTACHMENT_OPTIMAL_KHR(VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR),
	DEPTH_READ_ONLY_OPTIMAL_KHR(VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR),
	STENCIL_ATTACHMENT_OPTIMAL_KHR(VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR),
	STENCIL_READ_ONLY_OPTIMAL_KHR(VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR),
	READ_ONLY_OPTIMAL_KHR(VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR),
	ATTACHMENT_OPTIMAL_KHR(VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR),
	;
	
	public final int id;
	
	VkImageLayout(int id){ this.id = id; }
	
	private static final Map<Integer, VkImageLayout> BY_ID =
		Iters.from(VkImageLayout.class).map(e -> e.id).distinct()
		     .toMap(
			     id -> id,
			     id -> Iters.from(VkImageLayout.class).firstMatching(e -> e.id == id).orElseThrow()
		     );
	
	public static VkImageLayout from(int id){
		var value = BY_ID.get(id);
		if(value == null){
			throw new IllegalArgumentException("Unknown id: " + id);
		}
		return value;
	}
}
